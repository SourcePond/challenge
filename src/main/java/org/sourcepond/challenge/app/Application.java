/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.sourcepond.challenge.app;

import org.sourcepond.challenge.api.ClassifierBuilder;
import org.sourcepond.challenge.api.ClassifierBuilderFactory;

import java.io.PrintWriter;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutorService;

import static java.util.ResourceBundle.getBundle;
import static java.util.ServiceLoader.load;
import static java.util.concurrent.Executors.newCachedThreadPool;

public class Application {
    public static final String SHUTDOWN_MESSAGE_KEY = "shutdown.message";
    private ClassifierFactory factory;
    private ExecutorService executor;
    private PrintWriter console;
    private CLI cli;
    private ResultSinkFactory resultSinkFactory;
    private Random random;
    private ResourceBundle bundle;

    void setExecutor(ExecutorService executor) {
        this.executor = executor;
    }

    void setClassifierFactory(ClassifierFactory factory) {
        this.factory = factory;
    }

    void setConsole(PrintWriter console) {
        this.console = console;
    }

    public void setCli(CLI cli) {
        this.cli = cli;
    }

    void setResultSinkFactory(ResultSinkFactory resultSinkFactory) {
        this.resultSinkFactory = resultSinkFactory;
    }

    void setRandom(Random random) {
        this.random = random;
    }

    public void setBundle(ResourceBundle bundle) {
        this.bundle = bundle;
    }

    void startApp() {
        try (var c = cli) {
            var buildFuture = factory.create(c.readNumOfRanges());
            executor.execute(resultSinkFactory.createResultSink(buildFuture, random, console));

            // Wait for next user input; this will cancel the running task
            c.awaitUserExit();
            console.printf(bundle.getString(SHUTDOWN_MESSAGE_KEY)).flush();
        } finally {
            executor.shutdownNow();
        }
    }

    public static void main(String[] args) {
        var executor = newCachedThreadPool();
        var bundle = getBundle("app");
        var console = new PrintWriter(System.out);
        var random = new Random();
        load(ClassifierBuilderFactory.class)
                .findFirst()
                .ifPresentOrElse(
                        factory -> {
                            var main = new Application();
                            main.setExecutor(executor);
                            main.setClassifierFactory(
                                    new ClassifierFactory(
                                            factory,
                                            executor,
                                            random,
                                            bundle,
                                            console));
                            main.setCli(
                                    new CLI(
                                            bundle,
                                            System.in,
                                            console));
                            main.setConsole(console);
                            main.setRandom(random);
                            main.setResultSinkFactory(new ResultSinkFactory());
                            main.setBundle(bundle);
                            main.startApp();
                        },
                        () -> console.println("No service implementation found for interface " + ClassifierBuilder.class.getName()));
    }
}
